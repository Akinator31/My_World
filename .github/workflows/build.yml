name: project_check

on:
  push:
  pull_request:

env:
  EXECUTABLE: my_world

jobs:

  check_coding_style:

    name: Check the coding style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest

    steps:

      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Check coding style
        run: |
          check.sh $(pwd) $(pwd)
          errors_found=0

          while read -r line; do
            file=$(echo "$line" | awk -F: '{print $1}' | cut -c3-)
            line_number=$(echo "$line" | awk -F: '{print $2}')
            severity=$(echo "$line" | awk -F: '{print $3}' | awk '{print $1}')
            error_type=$(echo "$line" | awk -F: '{print $4}')

            if [ "$severity" = "INFO" ]; then
              echo "::error title="INFO coding style error",file=$file,line=$line_number::$error_type"
              errors_found=1
            elif [ "$severity" = "MINOR" ]; then
              echo "::error title="MINOR coding style error",file=$file,line=$line_number::$error_type"
              errors_found=1
            elif [ "$severity" = "MAJOR" ]; then
              echo "::error title="MAJOR coding style error",file=$file,line=$line_number::$error_type"
              errors_found=1
            fi
          done < coding-style-reports.log

          if [ $errors_found = 1 ]; then
            exit 1
          else
            exit 0
          fi

  check_program_compilation:
    
    name: Check the program compilation
    runs-on: ubuntu-latest
    needs: [check_coding_style]
    if: ${{ needs.check_coding_style.result == 'success' }}
    container:
      image: epitechcontent/epitest-docker:latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Make the project
        timeout-minutes: 2
        run: make
        working-directory: ${{ github.workspace }}
      
      - name: Clean the project
        run: make clean
        working-directory: ${{ github.workspace }}

      - name: Check executables
        run: |
          for file in $(echo "$EXECUTABLES" | tr ',' ' '); do
            if test -f "$file" || -x "$file"; then
              echo "The file $file exist and is executable"
            else
              echo "::error title="Binary not found or binary not executable",file=$file"
              exit 1
            fi
          done
  
  run_tests:
    
    name: Launch tests rule of Makefile
    runs-on: ubuntu-latest
    needs: [check_program_compilation]
    if: ${{ needs.check_program_compilation.result == 'success' }}
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Launch make tests_run
        timeout-minutes: 2
        run: make tests_run
        working-directory: ${{ github.workspace }}
